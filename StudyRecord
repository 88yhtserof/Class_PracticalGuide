1주차 (2021.10.03)

Passing Data
화면 간 데이터 전달 방식에는 6가지가 있다.
instance property – 값을 전달하는 뷰 컨트롤러에서 값을 전달받는 뷰 컨트롤러의 프로퍼티에 값을 할당하는 방법
segue – 세그웨이를 이용하여 도착 뷰 컨트롤러의 프로퍼티에 값을 할당하는 방법
instance – 인스턴스에 뷰컨트롤러를 할당하여 전달하는 뷰 컨트롤러와 연결, 그 후 뷰 객체에 직접 값을 할당하는 방법
delegate – 델리게이트 프로토콜을 생성하여 전달받는 뷰컨트롤러가 해당 델리게이트프로토콜을 채택하도록 하는 방법
closure
Notification


2주차 (2021.10.10)

Dispatch Queue
작업 수행 시 메인 스레드에서만 작업하기보다는 메인 스레드 외 여러 스레드를 두어 작업을 분담하는 것이 효율적이다. 메인 스레드에서는 사용자가 보는 화면(UI)과 관련한 작업을 수행해야하고 그 외 스레드는 화면이 멈추지 않도록 수행 시간이 오래걸리는 백그라운드 작업을 주로 수행한다. 
스레드 작업 수행에는 sync와 async가 있는데, async는 작업이 순서대로 완료되는걸 보장하지 않는다. 각 스레드들이 작업을 맡아 실행하면 각자 알아서 완료한다. (Group을 사용하면 해당 Group에 속한 스레드들이 모두 작업을 끝냈을 때 원하는 코드를 실행시킬 수 있다.) sync는 한 스레드가 작업을 시작하면 끝마칠 때까지 메인 스레드를 포함한 다른 모든 스레드들은 작업을 멈추고 해당 스레드가 끝날 때까지 기다린다.
사용한 클래스 DispatchQueue, DispatchGroup




3주차 (2021.10.17)
구조체와 클래스

구조체와 클래스는 데이터를 용도에 맞게 표현할 때 유용하다. 그리고 구조화된 데이터와 기능을 만들 수 있어 새로운 사용자 정의 데이터 타입을 만들 수 있다. 구조체와 클래스 모두 extension을 사용해 기능을 확장할 수 있고 Protocol을 채택하여 기능을 설정할 수 있다.
이 둘의 가장 큰 차이점은, 구조체는 값 타입이고 클래스는 참조 타입이라는 것이다.



4주차 (2021.10.25)
익스텐션 extension

기존의 클래스, 구조체, 열거형, 프로토콜에 새로운 기능을 추가하는 기능.
새로운 기능을 추가할 수는 있지만, 기존의 기능을 오버라이드(재정의)할 수는 없다
-연산 타입 프로퍼티/ 연산 인스턴스 프로퍼티 (저장 프로퍼티 추가 불가)
-타입 메서드/ 인스턴스 메서드
-이니셜라이저
- 서브스크립트
- 중첩타입
- 특정 프로토콜을 준수할 수 있도록 기능 추가

예).
extension Int {
     var isEven: Bool {
          return self % 2 == 0
     }
}



5주차 (2021.10.31)
Table View와 Table View Cell

cell 클래스를 만들어 따로 특정 레이아웃을 그릴 수 있다.
따라서 한  Table View에 cell을 용도에 맞게 여러 모양으로 그릴 수 있다.
이렇게 따로 cell의 클래스를 만든경우, TableView의 아울렛 변수에 cell을 등록해야 한다.
TableView를 사용하려면 UITableViewDelegate, UITableViewDataSource 프로토콜을 채택해야하는데, 클래스에 프로토콜을 채택하여 메서드를 구현할 경우 클래스가 커질 우려가 있기 때문에 extension을 사용한다.


